/*export const perm: Array<number> = [
  151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140,
  36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234,
  75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237,
  149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48,
  27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105,
  92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73,
  209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86,
  164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38,
  147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189,
  28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101,
  155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,
  178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12,
  191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,
  181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
  138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215,
  61, 156, 180, 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233,
  7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148,
  247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57,
  177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165,
  71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133,
  230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1,
  216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116,
  188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124,
  123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16,
  58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163,
  70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110,
  79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193,
  238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
  49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45,
  127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128,
  195, 78, 66, 215, 61, 156, 180,
];*/

function shuffle(tab: Array<number>) {
  for (let e = tab.length - 1; e > 0; e--) {
    let index = Math.round(Math.random() * (e - 1)),
      temp = tab[e];

    tab[e] = tab[index];
    tab[index] = temp;
  }
}

export function makePermutation() {
  let P: number[] = [];
  for (let i = 0; i < 256; i++) {
    P.push(i);
  }
  shuffle(P);
  for (let i = 0; i < 256; i++) {
    P.push(P[i]);
  }

  return P;
}


export function grad2(hash: number, x: number, y: number) {
  const h = hash & 7; // Convert low 3 bits of hash code
  const u = h < 4 ? x : y; // into 8 simple gradient directions,
  const v = h < 4 ? y : x; // and compute the dot product with (x,y).
  return (h & 1 ? -u : u) + (h & 2 ? -2.0 * v : 2.0 * v);
}

export function fade(t: number) {
  return t * t * t * (t * (t * 6 - 15) + 10);
}

export function lerp(t: number, a: number, b: number) {
  return a + t * (b - a);
}

export function noise2d(x: number, y: number,perm:number[]) {


  let ix0, iy0, ix1, iy1;
  let fx0, fy0, fx1, fy1;
  let s, t, nx0, nx1, n0, n1;

  ix0 = Math.floor(x); // Integer part of x
  iy0 = Math.floor(y); // Integer part of y
  fx0 = x - ix0; // Fractional part of x
  fy0 = y - iy0; // Fractional part of y
  fx1 = fx0 - 1.0;
  fy1 = fy0 - 1.0;
  ix1 = (ix0 + 1) & 0xff; // Wrap to 0..255
  iy1 = (iy0 + 1) & 0xff;
  ix0 = ix0 & 0xff;
  iy0 = iy0 & 0xff;

  t = fade(fy0);
  s = fade(fx0);

  nx0 = grad2(perm[ix0 + perm[iy0]], fx0, fy0);
  nx1 = grad2(perm[ix0 + perm[iy1]], fx0, fy1);
  n0 = lerp(t, nx0, nx1);

  nx0 = grad2(perm[ix1 + perm[iy0]], fx1, fy0);
  nx1 = grad2(perm[ix1 + perm[iy1]], fx1, fy1);
  n1 = lerp(t, nx0, nx1);

  return 0.507 * lerp(s, n0, n1);
}
