// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("ChatMessages")));
bytes32 constant ChatMessagesTableId = _tableId;

struct ChatMessagesData {
  uint256 time;
  uint256 gameID;
  string userName;
  string message;
}

library ChatMessages {
  /** Get the table values' field layout */
  function getFieldLayout() internal pure returns (FieldLayout) {
    uint256[] memory _fieldLayout = new uint256[](2);
    _fieldLayout[0] = 32;
    _fieldLayout[1] = 32;

    return FieldLayoutLib.encode(_fieldLayout, 2);
  }

  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.STRING;
    _schema[3] = SchemaType.STRING;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "key";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "time";
    fieldNames[1] = "gameID";
    fieldNames[2] = "userName";
    fieldNames[3] = "message";
  }

  /** Register the table with its config */
  function register() internal {
    StoreSwitch.registerTable(
      _tableId,
      getFieldLayout(),
      getKeySchema(),
      getValueSchema(),
      getKeyNames(),
      getFieldNames()
    );
  }

  /** Register the table with its config (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getFieldLayout(), getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Emit the ephemeral event using individual values */
  function emitEphemeral(
    bytes32 key,
    uint256 time,
    uint256 gameID,
    string memory userName,
    string memory message
  ) internal {
    bytes memory _data = encode(time, gameID, userName, message);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.emitEphemeralRecord(_tableId, _keyTuple, _data, getFieldLayout());
  }

  /** Emit the ephemeral event using individual values (using the specified store) */
  function emitEphemeral(
    IStore _store,
    bytes32 key,
    uint256 time,
    uint256 gameID,
    string memory userName,
    string memory message
  ) internal {
    bytes memory _data = encode(time, gameID, userName, message);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.emitEphemeralRecord(_tableId, _keyTuple, _data, getFieldLayout());
  }

  /** Emit the ephemeral event using the data struct */
  function emitEphemeral(bytes32 key, ChatMessagesData memory _table) internal {
    emitEphemeral(key, _table.time, _table.gameID, _table.userName, _table.message);
  }

  /** Emit the ephemeral event using the data struct (using the specified store) */
  function emitEphemeral(IStore _store, bytes32 key, ChatMessagesData memory _table) internal {
    emitEphemeral(_store, key, _table.time, _table.gameID, _table.userName, _table.message);
  }

  /** Tightly pack full data using this table's field layout */
  function encode(
    uint256 time,
    uint256 gameID,
    string memory userName,
    string memory message
  ) internal pure returns (bytes memory) {
    PackedCounter _encodedLengths;
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(bytes(userName).length, bytes(message).length);
    }

    return abi.encodePacked(time, gameID, _encodedLengths.unwrap(), bytes((userName)), bytes((message)));
  }

  /** Encode keys as a bytes32 array using this table's field layout */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    return _keyTuple;
  }
}
