// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("ArmyPrices")));
bytes32 constant ArmyPricesTableId = _tableId;

struct ArmyPricesData {
  uint256 priceSwordsman;
  uint256 priceArcher;
  uint256 priceCavalry;
}

library ArmyPrices {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](3);
    _fieldNames[0] = "priceSwordsman";
    _fieldNames[1] = "priceArcher";
    _fieldNames[2] = "priceCavalry";
    return ("ArmyPrices", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get priceSwordsman */
  function getPriceSwordsman(uint256 gameID) internal view returns (uint256 priceSwordsman) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get priceSwordsman (using the specified store) */
  function getPriceSwordsman(IStore _store, uint256 gameID) internal view returns (uint256 priceSwordsman) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set priceSwordsman */
  function setPriceSwordsman(uint256 gameID, uint256 priceSwordsman) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((priceSwordsman)));
  }

  /** Set priceSwordsman (using the specified store) */
  function setPriceSwordsman(IStore _store, uint256 gameID, uint256 priceSwordsman) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((priceSwordsman)));
  }

  /** Get priceArcher */
  function getPriceArcher(uint256 gameID) internal view returns (uint256 priceArcher) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get priceArcher (using the specified store) */
  function getPriceArcher(IStore _store, uint256 gameID) internal view returns (uint256 priceArcher) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set priceArcher */
  function setPriceArcher(uint256 gameID, uint256 priceArcher) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((priceArcher)));
  }

  /** Set priceArcher (using the specified store) */
  function setPriceArcher(IStore _store, uint256 gameID, uint256 priceArcher) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((priceArcher)));
  }

  /** Get priceCavalry */
  function getPriceCavalry(uint256 gameID) internal view returns (uint256 priceCavalry) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get priceCavalry (using the specified store) */
  function getPriceCavalry(IStore _store, uint256 gameID) internal view returns (uint256 priceCavalry) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set priceCavalry */
  function setPriceCavalry(uint256 gameID, uint256 priceCavalry) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((priceCavalry)));
  }

  /** Set priceCavalry (using the specified store) */
  function setPriceCavalry(IStore _store, uint256 gameID, uint256 priceCavalry) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((priceCavalry)));
  }

  /** Get the full data */
  function get(uint256 gameID) internal view returns (ArmyPricesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, uint256 gameID) internal view returns (ArmyPricesData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint256 gameID, uint256 priceSwordsman, uint256 priceArcher, uint256 priceCavalry) internal {
    bytes memory _data = encode(priceSwordsman, priceArcher, priceCavalry);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    uint256 gameID,
    uint256 priceSwordsman,
    uint256 priceArcher,
    uint256 priceCavalry
  ) internal {
    bytes memory _data = encode(priceSwordsman, priceArcher, priceCavalry);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(uint256 gameID, ArmyPricesData memory _table) internal {
    set(gameID, _table.priceSwordsman, _table.priceArcher, _table.priceCavalry);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, uint256 gameID, ArmyPricesData memory _table) internal {
    set(_store, gameID, _table.priceSwordsman, _table.priceArcher, _table.priceCavalry);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (ArmyPricesData memory _table) {
    _table.priceSwordsman = (uint256(Bytes.slice32(_blob, 0)));

    _table.priceArcher = (uint256(Bytes.slice32(_blob, 32)));

    _table.priceCavalry = (uint256(Bytes.slice32(_blob, 64)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint256 priceSwordsman,
    uint256 priceArcher,
    uint256 priceCavalry
  ) internal view returns (bytes memory) {
    return abi.encodePacked(priceSwordsman, priceArcher, priceCavalry);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(uint256 gameID) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));
  }

  /* Delete all data for given keys */
  function deleteRecord(uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
