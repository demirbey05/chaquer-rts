// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

// Import user types
import { State } from "./../common.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("GameMetaData")))
);
ResourceId constant GameMetaDataTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x00d70a0120010120142020202001000000000000000000000000000000000000
);

struct GameMetaDataData {
  uint256 mirror;
  State state;
  uint8 mapId;
  uint256 startBlock;
  address winner;
  uint256 numberOfCastle;
  uint256 colorCursor;
  uint256 numberOfPlayer;
  uint256 limitOfPlayer;
  bool isInited;
  string name;
}

library GameMetaData {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](11);
    _valueSchema[0] = SchemaType.UINT256;
    _valueSchema[1] = SchemaType.UINT8;
    _valueSchema[2] = SchemaType.UINT8;
    _valueSchema[3] = SchemaType.UINT256;
    _valueSchema[4] = SchemaType.ADDRESS;
    _valueSchema[5] = SchemaType.UINT256;
    _valueSchema[6] = SchemaType.UINT256;
    _valueSchema[7] = SchemaType.UINT256;
    _valueSchema[8] = SchemaType.UINT256;
    _valueSchema[9] = SchemaType.BOOL;
    _valueSchema[10] = SchemaType.STRING;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "gameID";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](11);
    fieldNames[0] = "mirror";
    fieldNames[1] = "state";
    fieldNames[2] = "mapId";
    fieldNames[3] = "startBlock";
    fieldNames[4] = "winner";
    fieldNames[5] = "numberOfCastle";
    fieldNames[6] = "colorCursor";
    fieldNames[7] = "numberOfPlayer";
    fieldNames[8] = "limitOfPlayer";
    fieldNames[9] = "isInited";
    fieldNames[10] = "name";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get mirror.
   */
  function getMirror(uint256 gameID) internal view returns (uint256 mirror) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get mirror.
   */
  function _getMirror(uint256 gameID) internal view returns (uint256 mirror) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set mirror.
   */
  function setMirror(uint256 gameID, uint256 mirror) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((mirror)), _fieldLayout);
  }

  /**
   * @notice Set mirror.
   */
  function _setMirror(uint256 gameID, uint256 mirror) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((mirror)), _fieldLayout);
  }

  /**
   * @notice Get state.
   */
  function getState(uint256 gameID) internal view returns (State state) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return State(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get state.
   */
  function _getState(uint256 gameID) internal view returns (State state) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return State(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set state.
   */
  function setState(uint256 gameID, State state) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(state)), _fieldLayout);
  }

  /**
   * @notice Set state.
   */
  function _setState(uint256 gameID, State state) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(state)), _fieldLayout);
  }

  /**
   * @notice Get mapId.
   */
  function getMapId(uint256 gameID) internal view returns (uint8 mapId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Get mapId.
   */
  function _getMapId(uint256 gameID) internal view returns (uint8 mapId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint8(bytes1(_blob)));
  }

  /**
   * @notice Set mapId.
   */
  function setMapId(uint256 gameID, uint8 mapId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((mapId)), _fieldLayout);
  }

  /**
   * @notice Set mapId.
   */
  function _setMapId(uint256 gameID, uint8 mapId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((mapId)), _fieldLayout);
  }

  /**
   * @notice Get startBlock.
   */
  function getStartBlock(uint256 gameID) internal view returns (uint256 startBlock) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get startBlock.
   */
  function _getStartBlock(uint256 gameID) internal view returns (uint256 startBlock) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set startBlock.
   */
  function setStartBlock(uint256 gameID, uint256 startBlock) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((startBlock)), _fieldLayout);
  }

  /**
   * @notice Set startBlock.
   */
  function _setStartBlock(uint256 gameID, uint256 startBlock) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((startBlock)), _fieldLayout);
  }

  /**
   * @notice Get winner.
   */
  function getWinner(uint256 gameID) internal view returns (address winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get winner.
   */
  function _getWinner(uint256 gameID) internal view returns (address winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set winner.
   */
  function setWinner(uint256 gameID, address winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Set winner.
   */
  function _setWinner(uint256 gameID, address winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Get numberOfCastle.
   */
  function getNumberOfCastle(uint256 gameID) internal view returns (uint256 numberOfCastle) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get numberOfCastle.
   */
  function _getNumberOfCastle(uint256 gameID) internal view returns (uint256 numberOfCastle) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set numberOfCastle.
   */
  function setNumberOfCastle(uint256 gameID, uint256 numberOfCastle) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((numberOfCastle)), _fieldLayout);
  }

  /**
   * @notice Set numberOfCastle.
   */
  function _setNumberOfCastle(uint256 gameID, uint256 numberOfCastle) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((numberOfCastle)), _fieldLayout);
  }

  /**
   * @notice Get colorCursor.
   */
  function getColorCursor(uint256 gameID) internal view returns (uint256 colorCursor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get colorCursor.
   */
  function _getColorCursor(uint256 gameID) internal view returns (uint256 colorCursor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set colorCursor.
   */
  function setColorCursor(uint256 gameID, uint256 colorCursor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((colorCursor)), _fieldLayout);
  }

  /**
   * @notice Set colorCursor.
   */
  function _setColorCursor(uint256 gameID, uint256 colorCursor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((colorCursor)), _fieldLayout);
  }

  /**
   * @notice Get numberOfPlayer.
   */
  function getNumberOfPlayer(uint256 gameID) internal view returns (uint256 numberOfPlayer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get numberOfPlayer.
   */
  function _getNumberOfPlayer(uint256 gameID) internal view returns (uint256 numberOfPlayer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set numberOfPlayer.
   */
  function setNumberOfPlayer(uint256 gameID, uint256 numberOfPlayer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((numberOfPlayer)), _fieldLayout);
  }

  /**
   * @notice Set numberOfPlayer.
   */
  function _setNumberOfPlayer(uint256 gameID, uint256 numberOfPlayer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((numberOfPlayer)), _fieldLayout);
  }

  /**
   * @notice Get limitOfPlayer.
   */
  function getLimitOfPlayer(uint256 gameID) internal view returns (uint256 limitOfPlayer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get limitOfPlayer.
   */
  function _getLimitOfPlayer(uint256 gameID) internal view returns (uint256 limitOfPlayer) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 8, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set limitOfPlayer.
   */
  function setLimitOfPlayer(uint256 gameID, uint256 limitOfPlayer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((limitOfPlayer)), _fieldLayout);
  }

  /**
   * @notice Set limitOfPlayer.
   */
  function _setLimitOfPlayer(uint256 gameID, uint256 limitOfPlayer) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 8, abi.encodePacked((limitOfPlayer)), _fieldLayout);
  }

  /**
   * @notice Get isInited.
   */
  function getIsInited(uint256 gameID) internal view returns (bool isInited) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get isInited.
   */
  function _getIsInited(uint256 gameID) internal view returns (bool isInited) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 9, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set isInited.
   */
  function setIsInited(uint256 gameID, bool isInited) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((isInited)), _fieldLayout);
  }

  /**
   * @notice Set isInited.
   */
  function _setIsInited(uint256 gameID, bool isInited) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 9, abi.encodePacked((isInited)), _fieldLayout);
  }

  /**
   * @notice Get name.
   */
  function getName(uint256 gameID) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Get name.
   */
  function _getName(uint256 gameID) internal view returns (string memory name) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (string(_blob));
  }

  /**
   * @notice Set name.
   */
  function setName(uint256 gameID, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Set name.
   */
  function _setName(uint256 gameID, string memory name) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, bytes((name)));
  }

  /**
   * @notice Get the length of name.
   */
  function lengthName(uint256 gameID) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of name.
   */
  function _lengthName(uint256 gameID) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemName(uint256 gameID, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Get an item of name.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemName(uint256 gameID, uint256 _index) internal view returns (string memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (string(_blob));
    }
  }

  /**
   * @notice Push a slice to name.
   */
  function pushName(uint256 gameID, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Push a slice to name.
   */
  function _pushName(uint256 gameID, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, bytes((_slice)));
  }

  /**
   * @notice Pop a slice from name.
   */
  function popName(uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop a slice from name.
   */
  function _popName(uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function updateName(uint256 gameID, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update a slice of name at `_index`.
   */
  function _updateName(uint256 gameID, uint256 _index, string memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    unchecked {
      bytes memory _encoded = bytes((_slice));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 gameID) internal view returns (GameMetaDataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 gameID) internal view returns (GameMetaDataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 gameID,
    uint256 mirror,
    State state,
    uint8 mapId,
    uint256 startBlock,
    address winner,
    uint256 numberOfCastle,
    uint256 colorCursor,
    uint256 numberOfPlayer,
    uint256 limitOfPlayer,
    bool isInited,
    string memory name
  ) internal {
    bytes memory _staticData = encodeStatic(
      mirror,
      state,
      mapId,
      startBlock,
      winner,
      numberOfCastle,
      colorCursor,
      numberOfPlayer,
      limitOfPlayer,
      isInited
    );

    PackedCounter _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 gameID,
    uint256 mirror,
    State state,
    uint8 mapId,
    uint256 startBlock,
    address winner,
    uint256 numberOfCastle,
    uint256 colorCursor,
    uint256 numberOfPlayer,
    uint256 limitOfPlayer,
    bool isInited,
    string memory name
  ) internal {
    bytes memory _staticData = encodeStatic(
      mirror,
      state,
      mapId,
      startBlock,
      winner,
      numberOfCastle,
      colorCursor,
      numberOfPlayer,
      limitOfPlayer,
      isInited
    );

    PackedCounter _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 gameID, GameMetaDataData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.mirror,
      _table.state,
      _table.mapId,
      _table.startBlock,
      _table.winner,
      _table.numberOfCastle,
      _table.colorCursor,
      _table.numberOfPlayer,
      _table.limitOfPlayer,
      _table.isInited
    );

    PackedCounter _encodedLengths = encodeLengths(_table.name);
    bytes memory _dynamicData = encodeDynamic(_table.name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 gameID, GameMetaDataData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.mirror,
      _table.state,
      _table.mapId,
      _table.startBlock,
      _table.winner,
      _table.numberOfCastle,
      _table.colorCursor,
      _table.numberOfPlayer,
      _table.limitOfPlayer,
      _table.isInited
    );

    PackedCounter _encodedLengths = encodeLengths(_table.name);
    bytes memory _dynamicData = encodeDynamic(_table.name);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256 mirror,
      State state,
      uint8 mapId,
      uint256 startBlock,
      address winner,
      uint256 numberOfCastle,
      uint256 colorCursor,
      uint256 numberOfPlayer,
      uint256 limitOfPlayer,
      bool isInited
    )
  {
    mirror = (uint256(Bytes.slice32(_blob, 0)));

    state = State(uint8(Bytes.slice1(_blob, 32)));

    mapId = (uint8(Bytes.slice1(_blob, 33)));

    startBlock = (uint256(Bytes.slice32(_blob, 34)));

    winner = (address(Bytes.slice20(_blob, 66)));

    numberOfCastle = (uint256(Bytes.slice32(_blob, 86)));

    colorCursor = (uint256(Bytes.slice32(_blob, 118)));

    numberOfPlayer = (uint256(Bytes.slice32(_blob, 150)));

    limitOfPlayer = (uint256(Bytes.slice32(_blob, 182)));

    isInited = (_toBool(uint8(Bytes.slice1(_blob, 214))));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(PackedCounter _encodedLengths, bytes memory _blob) internal pure returns (string memory name) {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    name = (string(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (GameMetaDataData memory _table) {
    (
      _table.mirror,
      _table.state,
      _table.mapId,
      _table.startBlock,
      _table.winner,
      _table.numberOfCastle,
      _table.colorCursor,
      _table.numberOfPlayer,
      _table.limitOfPlayer,
      _table.isInited
    ) = decodeStatic(_staticData);

    (_table.name) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 mirror,
    State state,
    uint8 mapId,
    uint256 startBlock,
    address winner,
    uint256 numberOfCastle,
    uint256 colorCursor,
    uint256 numberOfPlayer,
    uint256 limitOfPlayer,
    bool isInited
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        mirror,
        state,
        mapId,
        startBlock,
        winner,
        numberOfCastle,
        colorCursor,
        numberOfPlayer,
        limitOfPlayer,
        isInited
      );
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(string memory name) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(bytes(name).length);
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(string memory name) internal pure returns (bytes memory) {
    return abi.encodePacked(bytes((name)));
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 mirror,
    State state,
    uint8 mapId,
    uint256 startBlock,
    address winner,
    uint256 numberOfCastle,
    uint256 colorCursor,
    uint256 numberOfPlayer,
    uint256 limitOfPlayer,
    bool isInited,
    string memory name
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(
      mirror,
      state,
      mapId,
      startBlock,
      winner,
      numberOfCastle,
      colorCursor,
      numberOfPlayer,
      limitOfPlayer,
      isInited
    );

    PackedCounter _encodedLengths = encodeLengths(name);
    bytes memory _dynamicData = encodeDynamic(name);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 gameID) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
