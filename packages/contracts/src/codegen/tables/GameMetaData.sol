// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

// Import user types
import { State } from "./../common.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("GameMetaData")))
);
ResourceId constant GameMetaDataTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0075050001201420200000000000000000000000000000000000000000000000
);

struct GameMetaDataData {
  State state;
  uint256 startBlock;
  address winner;
  uint256 numberOfCastle;
  uint256 colorCursor;
}

library GameMetaData {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](5);
    _valueSchema[0] = SchemaType.UINT8;
    _valueSchema[1] = SchemaType.UINT256;
    _valueSchema[2] = SchemaType.ADDRESS;
    _valueSchema[3] = SchemaType.UINT256;
    _valueSchema[4] = SchemaType.UINT256;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "gameID";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](5);
    fieldNames[0] = "state";
    fieldNames[1] = "startBlock";
    fieldNames[2] = "winner";
    fieldNames[3] = "numberOfCastle";
    fieldNames[4] = "colorCursor";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config (using the specified store).
   */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get state.
   */
  function getState(uint256 gameID) internal view returns (State state) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return State(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get state.
   */
  function _getState(uint256 gameID) internal view returns (State state) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return State(uint8(bytes1(_blob)));
  }

  /**
   * @notice Get state (using the specified store).
   */
  function getState(IStore _store, uint256 gameID) internal view returns (State state) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return State(uint8(bytes1(_blob)));
  }

  /**
   * @notice Set state.
   */
  function setState(uint256 gameID, State state) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(state)), _fieldLayout);
  }

  /**
   * @notice Set state.
   */
  function _setState(uint256 gameID, State state) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(state)), _fieldLayout);
  }

  /**
   * @notice Set state (using the specified store).
   */
  function setState(IStore _store, uint256 gameID, State state) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked(uint8(state)), _fieldLayout);
  }

  /**
   * @notice Get startBlock.
   */
  function getStartBlock(uint256 gameID) internal view returns (uint256 startBlock) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get startBlock.
   */
  function _getStartBlock(uint256 gameID) internal view returns (uint256 startBlock) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get startBlock (using the specified store).
   */
  function getStartBlock(IStore _store, uint256 gameID) internal view returns (uint256 startBlock) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set startBlock.
   */
  function setStartBlock(uint256 gameID, uint256 startBlock) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((startBlock)), _fieldLayout);
  }

  /**
   * @notice Set startBlock.
   */
  function _setStartBlock(uint256 gameID, uint256 startBlock) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((startBlock)), _fieldLayout);
  }

  /**
   * @notice Set startBlock (using the specified store).
   */
  function setStartBlock(IStore _store, uint256 gameID, uint256 startBlock) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((startBlock)), _fieldLayout);
  }

  /**
   * @notice Get winner.
   */
  function getWinner(uint256 gameID) internal view returns (address winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get winner.
   */
  function _getWinner(uint256 gameID) internal view returns (address winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get winner (using the specified store).
   */
  function getWinner(IStore _store, uint256 gameID) internal view returns (address winner) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set winner.
   */
  function setWinner(uint256 gameID, address winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Set winner.
   */
  function _setWinner(uint256 gameID, address winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Set winner (using the specified store).
   */
  function setWinner(IStore _store, uint256 gameID, address winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Get numberOfCastle.
   */
  function getNumberOfCastle(uint256 gameID) internal view returns (uint256 numberOfCastle) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get numberOfCastle.
   */
  function _getNumberOfCastle(uint256 gameID) internal view returns (uint256 numberOfCastle) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get numberOfCastle (using the specified store).
   */
  function getNumberOfCastle(IStore _store, uint256 gameID) internal view returns (uint256 numberOfCastle) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set numberOfCastle.
   */
  function setNumberOfCastle(uint256 gameID, uint256 numberOfCastle) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((numberOfCastle)), _fieldLayout);
  }

  /**
   * @notice Set numberOfCastle.
   */
  function _setNumberOfCastle(uint256 gameID, uint256 numberOfCastle) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((numberOfCastle)), _fieldLayout);
  }

  /**
   * @notice Set numberOfCastle (using the specified store).
   */
  function setNumberOfCastle(IStore _store, uint256 gameID, uint256 numberOfCastle) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((numberOfCastle)), _fieldLayout);
  }

  /**
   * @notice Get colorCursor.
   */
  function getColorCursor(uint256 gameID) internal view returns (uint256 colorCursor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get colorCursor.
   */
  function _getColorCursor(uint256 gameID) internal view returns (uint256 colorCursor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get colorCursor (using the specified store).
   */
  function getColorCursor(IStore _store, uint256 gameID) internal view returns (uint256 colorCursor) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes32 _blob = _store.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set colorCursor.
   */
  function setColorCursor(uint256 gameID, uint256 colorCursor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((colorCursor)), _fieldLayout);
  }

  /**
   * @notice Set colorCursor.
   */
  function _setColorCursor(uint256 gameID, uint256 colorCursor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((colorCursor)), _fieldLayout);
  }

  /**
   * @notice Set colorCursor (using the specified store).
   */
  function setColorCursor(IStore _store, uint256 gameID, uint256 colorCursor) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((colorCursor)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint256 gameID) internal view returns (GameMetaDataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint256 gameID) internal view returns (GameMetaDataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data (using the specified store).
   */
  function get(IStore _store, uint256 gameID) internal view returns (GameMetaDataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = _store.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    uint256 gameID,
    State state,
    uint256 startBlock,
    address winner,
    uint256 numberOfCastle,
    uint256 colorCursor
  ) internal {
    bytes memory _staticData = encodeStatic(state, startBlock, winner, numberOfCastle, colorCursor);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    uint256 gameID,
    State state,
    uint256 startBlock,
    address winner,
    uint256 numberOfCastle,
    uint256 colorCursor
  ) internal {
    bytes memory _staticData = encodeStatic(state, startBlock, winner, numberOfCastle, colorCursor);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values (using the specified store).
   */
  function set(
    IStore _store,
    uint256 gameID,
    State state,
    uint256 startBlock,
    address winner,
    uint256 numberOfCastle,
    uint256 colorCursor
  ) internal {
    bytes memory _staticData = encodeStatic(state, startBlock, winner, numberOfCastle, colorCursor);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint256 gameID, GameMetaDataData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.state,
      _table.startBlock,
      _table.winner,
      _table.numberOfCastle,
      _table.colorCursor
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint256 gameID, GameMetaDataData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.state,
      _table.startBlock,
      _table.winner,
      _table.numberOfCastle,
      _table.colorCursor
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct (using the specified store).
   */
  function set(IStore _store, uint256 gameID, GameMetaDataData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.state,
      _table.startBlock,
      _table.winner,
      _table.numberOfCastle,
      _table.colorCursor
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (State state, uint256 startBlock, address winner, uint256 numberOfCastle, uint256 colorCursor)
  {
    state = State(uint8(Bytes.slice1(_blob, 0)));

    startBlock = (uint256(Bytes.slice32(_blob, 1)));

    winner = (address(Bytes.slice20(_blob, 33)));

    numberOfCastle = (uint256(Bytes.slice32(_blob, 53)));

    colorCursor = (uint256(Bytes.slice32(_blob, 85)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  ) internal pure returns (GameMetaDataData memory _table) {
    (_table.state, _table.startBlock, _table.winner, _table.numberOfCastle, _table.colorCursor) = decodeStatic(
      _staticData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Delete all data for given keys (using the specified store).
   */
  function deleteRecord(IStore _store, uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    State state,
    uint256 startBlock,
    address winner,
    uint256 numberOfCastle,
    uint256 colorCursor
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(state, startBlock, winner, numberOfCastle, colorCursor);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    State state,
    uint256 startBlock,
    address winner,
    uint256 numberOfCastle,
    uint256 colorCursor
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(state, startBlock, winner, numberOfCastle, colorCursor);

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint256 gameID) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    return _keyTuple;
  }
}
