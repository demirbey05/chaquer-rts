// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("MapConfig")));
bytes32 constant MapConfigTableId = _tableId;

library MapConfig {
  /** Get the table values' field layout */
  function getFieldLayout() internal pure returns (FieldLayout) {
    uint256[] memory _fieldLayout = new uint256[](2);
    _fieldLayout[0] = 4;
    _fieldLayout[1] = 4;

    return FieldLayoutLib.encode(_fieldLayout, 1);
  }

  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.BYTES;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "gameID";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "width";
    fieldNames[1] = "height";
    fieldNames[2] = "terrain";
  }

  /** Register the table with its config */
  function register() internal {
    StoreSwitch.registerTable(
      _tableId,
      getFieldLayout(),
      getKeySchema(),
      getValueSchema(),
      getKeyNames(),
      getFieldNames()
    );
  }

  /** Register the table with its config (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getFieldLayout(), getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get width */
  function getWidth(uint256 gameID) internal view returns (uint32 width) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getFieldLayout());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get width (using the specified store) */
  function getWidth(IStore _store, uint256 gameID) internal view returns (uint32 width) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getFieldLayout());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set width */
  function setWidth(uint256 gameID, uint32 width) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((width)), getFieldLayout());
  }

  /** Set width (using the specified store) */
  function setWidth(IStore _store, uint256 gameID, uint32 width) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((width)), getFieldLayout());
  }

  /** Get height */
  function getHeight(uint256 gameID) internal view returns (uint32 height) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getFieldLayout());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get height (using the specified store) */
  function getHeight(IStore _store, uint256 gameID) internal view returns (uint32 height) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getFieldLayout());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set height */
  function setHeight(uint256 gameID, uint32 height) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((height)), getFieldLayout());
  }

  /** Set height (using the specified store) */
  function setHeight(IStore _store, uint256 gameID, uint32 height) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((height)), getFieldLayout());
  }

  /** Get terrain */
  function getTerrain(uint256 gameID) internal view returns (bytes memory terrain) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getFieldLayout());
    return (bytes(_blob));
  }

  /** Get terrain (using the specified store) */
  function getTerrain(IStore _store, uint256 gameID) internal view returns (bytes memory terrain) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getFieldLayout());
    return (bytes(_blob));
  }

  /** Set terrain */
  function setTerrain(uint256 gameID, bytes memory terrain) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setField(_tableId, _keyTuple, 2, bytes((terrain)), getFieldLayout());
  }

  /** Set terrain (using the specified store) */
  function setTerrain(IStore _store, uint256 gameID, bytes memory terrain) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setField(_tableId, _keyTuple, 2, bytes((terrain)), getFieldLayout());
  }

  /** Get the length of terrain */
  function lengthTerrain(uint256 gameID) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getFieldLayout());
    unchecked {
      return _byteLength / 1;
    }
  }

  /** Get the length of terrain (using the specified store) */
  function lengthTerrain(IStore _store, uint256 gameID) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getFieldLayout());
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * Get an item of terrain
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemTerrain(uint256 gameID, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        2,
        getFieldLayout(),
        _index * 1,
        (_index + 1) * 1
      );
      return (bytes(_blob));
    }
  }

  /**
   * Get an item of terrain (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemTerrain(IStore _store, uint256 gameID, uint256 _index) internal view returns (bytes memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    unchecked {
      bytes memory _blob = _store.getFieldSlice(_tableId, _keyTuple, 2, getFieldLayout(), _index * 1, (_index + 1) * 1);
      return (bytes(_blob));
    }
  }

  /** Push a slice to terrain */
  function pushTerrain(uint256 gameID, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, bytes((_slice)), getFieldLayout());
  }

  /** Push a slice to terrain (using the specified store) */
  function pushTerrain(IStore _store, uint256 gameID, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.pushToField(_tableId, _keyTuple, 2, bytes((_slice)), getFieldLayout());
  }

  /** Pop a slice from terrain */
  function popTerrain(uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 1, getFieldLayout());
  }

  /** Pop a slice from terrain (using the specified store) */
  function popTerrain(IStore _store, uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.popFromField(_tableId, _keyTuple, 2, 1, getFieldLayout());
  }

  /**
   * Update a slice of terrain at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateTerrain(uint256 gameID, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)), getFieldLayout());
    }
  }

  /**
   * Update a slice of terrain (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateTerrain(IStore _store, uint256 gameID, uint256 _index, bytes memory _slice) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 2, _index * 1, bytes((_slice)), getFieldLayout());
    }
  }

  /** Get the full data */
  function get(uint256 gameID) internal view returns (uint32 width, uint32 height, bytes memory terrain) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getFieldLayout());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    uint256 gameID
  ) internal view returns (uint32 width, uint32 height, bytes memory terrain) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getFieldLayout());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(uint256 gameID, uint32 width, uint32 height, bytes memory terrain) internal {
    bytes memory _data = encode(width, height, terrain);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getFieldLayout());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, uint256 gameID, uint32 width, uint32 height, bytes memory terrain) internal {
    bytes memory _data = encode(width, height, terrain);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.setRecord(_tableId, _keyTuple, _data, getFieldLayout());
  }

  /**
   * Decode the tightly packed blob using this table's field layout.
   * Undefined behaviour for invalid blobs.
   */
  function decode(bytes memory _blob) internal pure returns (uint32 width, uint32 height, bytes memory terrain) {
    // 8 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 8));

    width = (uint32(Bytes.slice4(_blob, 0)));

    height = (uint32(Bytes.slice4(_blob, 4)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 8) {
      // skip static data length + dynamic lengths word
      uint256 _start = 40;
      uint256 _end;
      unchecked {
        _end = 40 + _encodedLengths.atIndex(0);
      }
      terrain = (bytes(SliceLib.getSubslice(_blob, _start, _end).toBytes()));
    }
  }

  /** Tightly pack full data using this table's field layout */
  function encode(uint32 width, uint32 height, bytes memory terrain) internal pure returns (bytes memory) {
    PackedCounter _encodedLengths;
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(bytes(terrain).length);
    }

    return abi.encodePacked(width, height, _encodedLengths.unwrap(), bytes((terrain)));
  }

  /** Encode keys as a bytes32 array using this table's field layout */
  function encodeKeyTuple(uint256 gameID) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getFieldLayout());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32(uint256(gameID));

    _store.deleteRecord(_tableId, _keyTuple, getFieldLayout());
  }
}
