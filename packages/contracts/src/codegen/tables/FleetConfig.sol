// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("FleetConfig")));
bytes32 constant FleetConfigTableId = _tableId;

struct FleetConfigData {
  uint32 numSmall;
  uint32 numMedium;
  uint32 numBig;
  uint256 gameID;
}

library FleetConfig {
  /** Get the table values' field layout */
  function getFieldLayout() internal pure returns (FieldLayout) {
    uint256[] memory _fieldLayout = new uint256[](4);
    _fieldLayout[0] = 4;
    _fieldLayout[1] = 4;
    _fieldLayout[2] = 4;
    _fieldLayout[3] = 32;

    return FieldLayoutLib.encode(_fieldLayout, 0);
  }

  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "key";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "numSmall";
    fieldNames[1] = "numMedium";
    fieldNames[2] = "numBig";
    fieldNames[3] = "gameID";
  }

  /** Register the table with its config */
  function register() internal {
    StoreSwitch.registerTable(
      _tableId,
      getFieldLayout(),
      getKeySchema(),
      getValueSchema(),
      getKeyNames(),
      getFieldNames()
    );
  }

  /** Register the table with its config (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getFieldLayout(), getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get numSmall */
  function getNumSmall(bytes32 key) internal view returns (uint32 numSmall) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getFieldLayout());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get numSmall (using the specified store) */
  function getNumSmall(IStore _store, bytes32 key) internal view returns (uint32 numSmall) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getFieldLayout());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set numSmall */
  function setNumSmall(bytes32 key, uint32 numSmall) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((numSmall)), getFieldLayout());
  }

  /** Set numSmall (using the specified store) */
  function setNumSmall(IStore _store, bytes32 key, uint32 numSmall) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((numSmall)), getFieldLayout());
  }

  /** Get numMedium */
  function getNumMedium(bytes32 key) internal view returns (uint32 numMedium) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getFieldLayout());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get numMedium (using the specified store) */
  function getNumMedium(IStore _store, bytes32 key) internal view returns (uint32 numMedium) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getFieldLayout());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set numMedium */
  function setNumMedium(bytes32 key, uint32 numMedium) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((numMedium)), getFieldLayout());
  }

  /** Set numMedium (using the specified store) */
  function setNumMedium(IStore _store, bytes32 key, uint32 numMedium) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((numMedium)), getFieldLayout());
  }

  /** Get numBig */
  function getNumBig(bytes32 key) internal view returns (uint32 numBig) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getFieldLayout());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get numBig (using the specified store) */
  function getNumBig(IStore _store, bytes32 key) internal view returns (uint32 numBig) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getFieldLayout());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set numBig */
  function setNumBig(bytes32 key, uint32 numBig) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((numBig)), getFieldLayout());
  }

  /** Set numBig (using the specified store) */
  function setNumBig(IStore _store, bytes32 key, uint32 numBig) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((numBig)), getFieldLayout());
  }

  /** Get gameID */
  function getGameID(bytes32 key) internal view returns (uint256 gameID) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3, getFieldLayout());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get gameID (using the specified store) */
  function getGameID(IStore _store, bytes32 key) internal view returns (uint256 gameID) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3, getFieldLayout());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set gameID */
  function setGameID(bytes32 key, uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((gameID)), getFieldLayout());
  }

  /** Set gameID (using the specified store) */
  function setGameID(IStore _store, bytes32 key, uint256 gameID) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((gameID)), getFieldLayout());
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (FleetConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getFieldLayout());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (FleetConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getFieldLayout());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(bytes32 key, uint32 numSmall, uint32 numMedium, uint32 numBig, uint256 gameID) internal {
    bytes memory _data = encode(numSmall, numMedium, numBig, gameID);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getFieldLayout());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, bytes32 key, uint32 numSmall, uint32 numMedium, uint32 numBig, uint256 gameID) internal {
    bytes memory _data = encode(numSmall, numMedium, numBig, gameID);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setRecord(_tableId, _keyTuple, _data, getFieldLayout());
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, FleetConfigData memory _table) internal {
    set(key, _table.numSmall, _table.numMedium, _table.numBig, _table.gameID);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, FleetConfigData memory _table) internal {
    set(_store, key, _table.numSmall, _table.numMedium, _table.numBig, _table.gameID);
  }

  /** Decode the tightly packed blob using this table's field layout */
  function decode(bytes memory _blob) internal pure returns (FleetConfigData memory _table) {
    _table.numSmall = (uint32(Bytes.slice4(_blob, 0)));

    _table.numMedium = (uint32(Bytes.slice4(_blob, 4)));

    _table.numBig = (uint32(Bytes.slice4(_blob, 8)));

    _table.gameID = (uint256(Bytes.slice32(_blob, 12)));
  }

  /** Tightly pack full data using this table's field layout */
  function encode(
    uint32 numSmall,
    uint32 numMedium,
    uint32 numBig,
    uint256 gameID
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(numSmall, numMedium, numBig, gameID);
  }

  /** Encode keys as a bytes32 array using this table's field layout */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getFieldLayout());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.deleteRecord(_tableId, _keyTuple, getFieldLayout());
  }
}
